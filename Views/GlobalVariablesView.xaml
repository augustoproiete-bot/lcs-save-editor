<!--
Copyright(c) 2016-2019 Wes Hampson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->

<v:PageViewBase
    x:Class="LcsSaveEditor.Views.GlobalVariablesView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:c="clr-namespace:LcsSaveEditor.Converters;assembly=LcsSaveEditor.Converters"
    xmlns:r="clr-namespace:LcsSaveEditor.Resources;assembly=LcsSaveEditor.Resources"
    xmlns:vm="clr-namespace:LcsSaveEditor.ViewModels;assembly=LcsSaveEditor.ViewModels"
    xmlns:v="clr-namespace:LcsSaveEditor.Views"
    mc:Ignorable="d" 
    d:DesignHeight="325" d:DesignWidth="500">

    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style TargetType="CheckBox" x:Key="CheckBoxStyle">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5,0,0,0"/>
        </Style>
        <Style TargetType="Button" x:Key="ButtonStyle">
            <Setter Property="Margin" Value="5,5,5,5"/>
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="65"/>
        </Grid.RowDefinitions>

        <!-- Needed to allow DataGrid columns to be hidden via CheckBox -->
        <FrameworkElement x:Name="ProxyElement" Visibility="Collapsed"/>

        <DataGrid
            Grid.Row="0"
            Name="m_dataGrid"
            ItemsSource="{Binding NamedGlobalVariables}"
            SelectedIndex="{Binding SelectedRow}"
            HorizontalAlignment="Center"
            ScrollViewer.CanContentScroll="True"
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            SelectionMode="Single"
            AutoGenerateColumns="False"
            CanUserSortColumns="False"
            CanUserReorderColumns="True"
            CanUserResizeColumns="True"
            CanUserAddRows="False"
            CanUserDeleteRows="False"
            CanUserResizeRows="False"
            Loaded="DataGrid_Loaded"
            Unloaded="DataGrid_Unloaded"
            LoadingRow="DataGrid_LoadingRow">

            <DataGrid.InputBindings>
                <KeyBinding
                    Command="{Binding InsertRowAboveCommand}"
                    Key="Insert"/>
                <KeyBinding
                    Command="{Binding InsertRowBelowCommand}"
                    Key="Insert" Modifiers="Shift"/>
                <KeyBinding
                    Command="{Binding DeleteRowCommand}"
                    Key="Delete"/>
            </DataGrid.InputBindings>

            <DataGrid.Resources>
                <ContextMenu
                    x:Key="RowContextMenu"
                    DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                    <MenuItem
                        Command="{Binding Path=DataContext.InsertRowAboveCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
                        Header="{x:Static r:Strings.MenuItemHeaderInsertAbove}"
                        InputGestureText="Ins"/>
                    <MenuItem
                        Command="{Binding Path=DataContext.InsertRowBelowCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
                        Header="{x:Static r:Strings.MenuItemHeaderInsertBelow}"
                        InputGestureText="Shift+Ins"/>
                    <MenuItem
                        Command="{Binding Path=DataContext.DeleteRowCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
                        Header="{x:Static r:Strings.MenuItemHeaderDelete}"
                        InputGestureText="Del"/>
                </ContextMenu>
            </DataGrid.Resources>

            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Setter Property="ContextMenu" Value="{StaticResource RowContextMenu}"/>
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.RowHeaderTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Path=Header, RelativeSource={RelativeSource AncestorType=DataGridRow}}"/>
                </DataTemplate>
            </DataGrid.RowHeaderTemplate>

            <DataGrid.Columns>
                <DataGridTextColumn
                    Width="40*"
                    Header="{x:Static r:Strings.FieldName}"
                    Binding="{Binding Path=Name, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn
                    Width="25*"
                    Header="{x:Static r:Strings.FieldValueInt32}"
                    Binding="{Binding Path=ValueInt32, UpdateSourceTrigger=PropertyChanged}"
                    Visibility="{Binding DataContext.IsShowingColumnInt32,Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}"/>
                <DataGridTextColumn
                    Width="25*"
                    Header="{x:Static r:Strings.FieldValueUInt32}"
                    Binding="{Binding Path=ValueUInt32, UpdateSourceTrigger=PropertyChanged}"
                    Visibility="{Binding DataContext.IsShowingColumnUInt32, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}"/>
                <DataGridTextColumn
                    Width="25*"
                    Header="{x:Static r:Strings.FieldValueFloat}"
                    Binding="{Binding Path=ValueSingle, UpdateSourceTrigger=PropertyChanged}"
                    Visibility="{Binding DataContext.IsShowingColumnFloat, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}"/>
                <DataGridTemplateColumn
                    Width="25*"
                    Header="{x:Static r:Strings.FieldValueBoolean}"
                    Visibility="{Binding Path=DataContext.IsShowingColumnBoolean, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                IsChecked="{Binding Path=ValueBoolean, UpdateSourceTrigger=PropertyChanged}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <Grid Grid.Row="1" Background="White">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="75"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="125"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <CheckBox
                Grid.Row="0" Grid.Column="0"
                Style="{StaticResource CheckBoxStyle}"
                Content="{x:Static r:Strings.FieldValueInt32}"
                IsChecked="{Binding IsShowingColumnInt32}"/>
            <CheckBox
                Grid.Row="1" Grid.Column="0"
                Style="{StaticResource CheckBoxStyle}"
                Content="{x:Static r:Strings.FieldValueUInt32}"
                IsChecked="{Binding IsShowingColumnUInt32}"/>
            <CheckBox
                Grid.Row="0" Grid.Column="1"
                Style="{StaticResource CheckBoxStyle}"
                Content="{x:Static r:Strings.FieldValueFloat}"
                IsChecked="{Binding IsShowingColumnFloat}"/>
            <CheckBox
                Grid.Row="1" Grid.Column="1"
                Style="{StaticResource CheckBoxStyle}"
                Content="{x:Static r:Strings.FieldValueBoolean}"
                IsChecked="{Binding IsShowingColumnBoolean}"/>
            <Button
                Grid.Row="0" Grid.Column="2"
                Style="{StaticResource ButtonStyle}"
                Content="{x:Static r:Strings.ButtonTextLoadSymbols}"
                Command="{Binding LoadSymbolsCommand}"/>
            <Button
                Grid.Row="1" Grid.Column="2"
                Style="{StaticResource ButtonStyle}"
                Content="{x:Static r:Strings.ButtonTextSaveSymbols}"
                Command="{Binding SaveSymbolsCommand}"/>
        </Grid>
    </Grid>
</v:PageViewBase>
